{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\zahir\\\\Desktop\\\\noviReact\\\\Verzija 22.1.2021\\\\HotelApp\\\\frontend\\\\src\\\\components\\\\private_access_route.js\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport { UserContext } from '../UserContext';\n/**\r\n * A functional component that restricts access to routes, \r\n * only if a user doesn't meet the criteria of having a equal or higher 'access_id'\r\n * \r\n * Uses the React Context API to get the user data.\r\n * \r\n * Redirects to '/' route if user is not able to view that route\r\n * @param {Object} Component The page to be displayed on the specified route prop\r\n * @param {number} [accessId] Determines who can view the route, based on the database access_id of the user role.\r\n */\n\nexport const PrivateAccessRoute = ({\n  component: Component,\n  accessId,\n  ...rest\n}) => /*#__PURE__*/_jsxDEV(UserContext.Consumer, {\n  children: ({\n    user\n  }) => /*#__PURE__*/_jsxDEV(Route, { ...rest,\n    render: props => user.access_id >= accessId ? /*#__PURE__*/_jsxDEV(Component, { ...props,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: {\n        pathname: '/',\n        state: {\n          from: props.location\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 16,\n  columnNumber: 3\n}, this);\n_c = PrivateAccessRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateAccessRoute\");","map":{"version":3,"sources":["C:/Users/zahir/Desktop/noviReact/Verzija 22.1.2021/HotelApp/frontend/src/components/private_access_route.js"],"names":["React","Route","Redirect","UserContext","PrivateAccessRoute","component","Component","accessId","rest","user","props","access_id","pathname","state","from","location"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBC,EAAAA,QAAxB;AAAkC,KAAGC;AAArC,CAAD,kBAChC,QAAC,WAAD,CAAa,QAAb;AAAA,YACG,CAAC;AAAEC,IAAAA;AAAF,GAAD,kBACC,QAAC,KAAD,OACMD,IADN;AAEE,IAAA,MAAM,EAAEE,KAAK,IACXD,IAAI,CAACE,SAAL,IAAkBJ,QAAlB,gBACE,QAAC,SAAD,OAAeG,KAAf;AAAsB,MAAA,IAAI,EAAED;AAA5B;AAAA;AAAA;AAAA;AAAA,YADF,gBAGE,QAAC,QAAD;AACE,MAAA,EAAE,EAAE;AACFG,QAAAA,QAAQ,EAAE,GADR;AAEFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,IAAI,EAAEJ,KAAK,CAACK;AAAd;AAFL;AADN;AAAA;AAAA;AAAA;AAAA;AANN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,QADK;KAAMX,kB","sourcesContent":["import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport {UserContext} from '../UserContext'\r\n\r\n/**\r\n * A functional component that restricts access to routes, \r\n * only if a user doesn't meet the criteria of having a equal or higher 'access_id'\r\n * \r\n * Uses the React Context API to get the user data.\r\n * \r\n * Redirects to '/' route if user is not able to view that route\r\n * @param {Object} Component The page to be displayed on the specified route prop\r\n * @param {number} [accessId] Determines who can view the route, based on the database access_id of the user role.\r\n */\r\nexport const PrivateAccessRoute = ({ component: Component, accessId, ...rest }) => (\r\n  <UserContext.Consumer>\r\n    {({ user }) => (\r\n      <Route\r\n        {...rest}\r\n        render={props =>\r\n          user.access_id >= accessId ? (\r\n            <Component {...props} user={user} />\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/',\r\n                state: { from: props.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    )}\r\n  </UserContext.Consumer>\r\n)"]},"metadata":{},"sourceType":"module"}